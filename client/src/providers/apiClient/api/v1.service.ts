/**
 * vinimay
 * Vinimay is a decentralised social network focused on giving back control of its data to the user
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import '../rxjs-operators';

import { Comment } from '../model/comment';
import { CommentInput } from '../model/commentInput';
import { CommentsArray } from '../model/commentsArray';
import { CommentsResponse } from '../model/commentsResponse';
import { FriendInput } from '../model/friendInput';
import { FriendRequest } from '../model/friendRequest';
import { Friends } from '../model/friends';
import { Post } from '../model/post';
import { PostInput } from '../model/postInput';
import { PostsArray } from '../model/postsArray';
import { PostsResponse } from '../model/postsResponse';
import { Reaction } from '../model/reaction';
import { Reactions } from '../model/reactions';
import { User } from '../model/user';
import { UserDataInput } from '../model/userDataInput';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class V1Service {
    protected basePath = 'http://127.0.0.1:3000';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
			this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                (objA as any)[key] = (objB as any)[key];
            }
        }
        return <T1&T2>objA;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
     * Delete a single post
     * Delete a single post using its creation timestamp. Further documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Client-to-server-API#deletion).
     * @param timestamp The post&#39;s creation timestamp
     */
    public deleteV1ClientPostsTimestamp(timestamp: number, extraHttpRequestParams?: any): Observable<{}> {
        return this.deleteV1ClientPostsTimestampWithHttpInfo(timestamp, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Remove a comment
     * Remove a comment given its author and timestamp
     * @param user Post author
     * @param timestamp Post timestamp
     * @param commentTimestamp Comment timestamp
     */
    public deleteV1ClientPostsUserTimestampCommentsCommenttimestamp(user: string, timestamp: number, commentTimestamp: number, extraHttpRequestParams?: any): Observable<{}> {
        return this.deleteV1ClientPostsUserTimestampCommentsCommenttimestampWithHttpInfo(user, timestamp, commentTimestamp, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Delete a reaction
     * Delete a reaction to a given post
     * @param user Post author
     * @param timestamp The post&#39;s creation timestamp
     */
    public deleteV1ClientPostsUserTimestampReactions(user: string, timestamp: number, extraHttpRequestParams?: any): Observable<{}> {
        return this.deleteV1ClientPostsUserTimestampReactionsWithHttpInfo(user, timestamp, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Remove a comment
     * Remove a comment given its author and timestamp
     * @param timestamp The post&#39;s creation timestamp
     * @param commentTimestamp The comment&#39;s creation timestamp
     * @param idToken Identification token bound to a friend
     * @param signature 
     */
    public deleteV1ServerPostsTimestampCommentsCommenttimestamp(timestamp: number, commentTimestamp: number, idToken?: string, signature?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.deleteV1ServerPostsTimestampCommentsCommenttimestampWithHttpInfo(timestamp, commentTimestamp, idToken, signature, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Delete a reaction
     * Delete a reaction to a given post
     * @param timestamp The post&#39;s creation timestamp
     * @param idToken Identification token bound to a friend
     * @param signature 
     * @param body 
     */
    public deleteV1ServerPostsTimestampReactions(timestamp: number, idToken?: string, signature?: string, body?: Reaction, extraHttpRequestParams?: any): Observable<{}> {
        return this.deleteV1ServerPostsTimestampReactionsWithHttpInfo(timestamp, idToken, signature, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Retrieve all friend requests
     * Retrieve all friend requests (accepted, incoming and sent). Further documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Client-to-server-API#retrieval-4).
     */
    public getV1ClientFriends(extraHttpRequestParams?: any): Observable<Friends> {
        return this.getV1ClientFriendsWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Retrieve data on the current user
     * Retrieve data on the current user. Full documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Client-to-server-API#retrieval).
     */
    public getV1ClientMe(extraHttpRequestParams?: any): Observable<User> {
        return this.getV1ClientMeWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Retrieve posts
     * Retrieve all posts or using filters. Further documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Client-to-server-API#retrieval-1).
     * @param from Most recent timestamp
     * @param nb Number of posts to retrieve
     */
    public getV1ClientPosts(from?: number, nb?: number, extraHttpRequestParams?: any): Observable<PostsResponse> {
        return this.getV1ClientPostsWithHttpInfo(from, nb, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Retrieve a single post
     * Retrieve a single post using its creation timestamp. Further documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Client-to-server-API#retrieve-one-post).
     * @param user The post&#39;s author, identified as &#x60;username@instance-domain.tld&#x60;
     * @param timestamp The post&#39;s creation timestamp
     */
    public getV1ClientPostsUserTimestamp(user: string, timestamp: number, extraHttpRequestParams?: any): Observable<Post> {
        return this.getV1ClientPostsUserTimestampWithHttpInfo(user, timestamp, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Retrieve comments for a post
     * Retrieve comments for a given post based on its user and timestamp. Further documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Client-to-server-API#retrieval-2).
     * @param user The post&#39;s author, identified as &#x60;username@instance-domain.tld&#x60;
     * @param timestamp The post&#39;s creation timestamp
     * @param from Most recent timestamp
     * @param nb Number of comments to retrieve
     */
    public getV1ClientPostsUserTimestampComments(user: string, timestamp: number, from?: number, nb?: number, extraHttpRequestParams?: any): Observable<CommentsResponse> {
        return this.getV1ClientPostsUserTimestampCommentsWithHttpInfo(user, timestamp, from, nb, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Retrieve posts
     * Retrieve all posts or using filters. Further documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Server-to-server-API#retrieve-several-posts).
     * @param from Most recent timestamp
     * @param nb Number of posts to retrieve
     * @param idToken Identification token bound to a friend. If not provided, only public posts will be sent
     * @param signature 
     */
    public getV1ServerPosts(from?: number, nb?: number, idToken?: string, signature?: string, extraHttpRequestParams?: any): Observable<PostsArray> {
        return this.getV1ServerPostsWithHttpInfo(from, nb, idToken, signature, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Retrieve a single post
     * Retrieve a single post using its creation timestamp. Further documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Server-to-server-API#retrieve-one-post).
     * @param timestamp The post&#39;s creation timestamp
     * @param idToken Identification token bound to a friend
     * @param signature 
     */
    public getV1ServerPostsTimestamp(timestamp: number, idToken?: string, signature?: string, extraHttpRequestParams?: any): Observable<Post> {
        return this.getV1ServerPostsTimestampWithHttpInfo(timestamp, idToken, signature, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Retrieve comments from a post
     * Retrieve comments from a post using its creation timestamp. Further documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Server-to-server-API#retrieving-comments-on-a-post).
     * @param timestamp The post&#39;s creation timestamp
     * @param from Most recent timestamp
     * @param nb Number of comments to retrieve
     * @param idToken Identification token bound to a friend
     * @param signature 
     */
    public getV1ServerPostsTimestampComments(timestamp: number, from?: number, nb?: number, idToken?: string, signature?: string, extraHttpRequestParams?: any): Observable<CommentsArray> {
        return this.getV1ServerPostsTimestampCommentsWithHttpInfo(timestamp, from, nb, idToken, signature, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Create a friend/following request
     * Create a friend request or follow a given user
     * @param body 
     */
    public postV1ClientFriends(body?: FriendInput, extraHttpRequestParams?: any): Observable<{}> {
        return this.postV1ClientFriendsWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Create a post
     * Creates a post, provided the necessary information is present. Full documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Client-to-server-API#creation).
     * @param body 
     */
    public postV1ClientPosts(body?: PostInput, extraHttpRequestParams?: any): Observable<Post> {
        return this.postV1ClientPostsWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Create a new comment to a post
     * Create a comment on a givent post. Further documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Client-to-server-API#creation-1).
     * @param user The post&#39;s author, identified as &#x60;username@instance-domain.tld&#x60;
     * @param timestamp The post&#39;s creation timestamp
     * @param body 
     */
    public postV1ClientPostsUserTimestampComments(user: string, timestamp: number, body?: CommentInput, extraHttpRequestParams?: any): Observable<Comment> {
        return this.postV1ClientPostsUserTimestampCommentsWithHttpInfo(user, timestamp, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Add a reaction
     * Add a reaction to a given post
     * @param user Post author
     * @param timestamp The post&#39;s creation timestamp
     */
    public postV1ClientPostsUserTimestampReactions(user: string, timestamp: number, extraHttpRequestParams?: any): Observable<{}> {
        return this.postV1ClientPostsUserTimestampReactionsWithHttpInfo(user, timestamp, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Save friend request
     * Receive friend request and save it in the database as incoming
     * @param body 
     */
    public postV1ServerFriends(body?: FriendRequest, extraHttpRequestParams?: any): Observable<string> {
        return this.postV1ServerFriendsWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Add a comment to a post
     * Add a comment to a post using the post&#39;s creation timestamp. Further documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Server-to-server-API#post-a-comment).
     * @param timestamp The post&#39;s creation timestamp
     * @param idToken Identification token bound to a friend
     * @param signature 
     * @param body 
     */
    public postV1ServerPostsTimestampComments(timestamp: number, idToken?: string, signature?: string, body?: CommentInput, extraHttpRequestParams?: any): Observable<Comment> {
        return this.postV1ServerPostsTimestampCommentsWithHttpInfo(timestamp, idToken, signature, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Add a reaction
     * Add a reaction to a given post
     * @param timestamp The post&#39;s creation timestamp
     * @param idToken Identification token bound to a friend
     * @param signature 
     * @param body 
     */
    public postV1ServerPostsTimestampReactions(timestamp: number, idToken?: string, signature?: string, body?: Reaction, extraHttpRequestParams?: any): Observable<Reactions> {
        return this.postV1ServerPostsTimestampReactionsWithHttpInfo(timestamp, idToken, signature, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Update data on the current user
     * Update data on the current user. Full documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Client-to-server-API#update).
     * @param body 
     */
    public putV1ClientMe(body?: UserDataInput, extraHttpRequestParams?: any): Observable<User> {
        return this.putV1ClientMeWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * Delete a single post
     * Delete a single post using its creation timestamp. Further documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Client-to-server-API#deletion).
     * @param timestamp The post&#39;s creation timestamp
     */
    public deleteV1ClientPostsTimestampWithHttpInfo(timestamp: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/client/posts/${timestamp}'
                    .replace('${' + 'timestamp' + '}', String(timestamp));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'timestamp' is not null or undefined
        if (timestamp === null || timestamp === undefined) {
            throw new Error('Required parameter timestamp was null or undefined when calling deleteV1ClientPostsTimestamp.');
        }

        // to determine the Accept header
        let produces: string[] = [
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:true
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Remove a comment
     * Remove a comment given its author and timestamp
     * @param user Post author
     * @param timestamp Post timestamp
     * @param commentTimestamp Comment timestamp
     */
    public deleteV1ClientPostsUserTimestampCommentsCommenttimestampWithHttpInfo(user: string, timestamp: number, commentTimestamp: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/client/posts/${user}/${timestamp}/comments/${commentTimestamp}'
                    .replace('${' + 'user' + '}', String(user))
                    .replace('${' + 'timestamp' + '}', String(timestamp))
                    .replace('${' + 'commentTimestamp' + '}', String(commentTimestamp));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'user' is not null or undefined
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling deleteV1ClientPostsUserTimestampCommentsCommenttimestamp.');
        }
        // verify required parameter 'timestamp' is not null or undefined
        if (timestamp === null || timestamp === undefined) {
            throw new Error('Required parameter timestamp was null or undefined when calling deleteV1ClientPostsUserTimestampCommentsCommenttimestamp.');
        }
        // verify required parameter 'commentTimestamp' is not null or undefined
        if (commentTimestamp === null || commentTimestamp === undefined) {
            throw new Error('Required parameter commentTimestamp was null or undefined when calling deleteV1ClientPostsUserTimestampCommentsCommenttimestamp.');
        }

        // to determine the Accept header
        let produces: string[] = [
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:true
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Delete a reaction
     * Delete a reaction to a given post
     * @param user Post author
     * @param timestamp The post&#39;s creation timestamp
     */
    public deleteV1ClientPostsUserTimestampReactionsWithHttpInfo(user: string, timestamp: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/client/posts/${user}/${timestamp}/reactions'
                    .replace('${' + 'user' + '}', String(user))
                    .replace('${' + 'timestamp' + '}', String(timestamp));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'user' is not null or undefined
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling deleteV1ClientPostsUserTimestampReactions.');
        }
        // verify required parameter 'timestamp' is not null or undefined
        if (timestamp === null || timestamp === undefined) {
            throw new Error('Required parameter timestamp was null or undefined when calling deleteV1ClientPostsUserTimestampReactions.');
        }

        // to determine the Accept header
        let produces: string[] = [
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:true
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Remove a comment
     * Remove a comment given its author and timestamp
     * @param timestamp The post&#39;s creation timestamp
     * @param commentTimestamp The comment&#39;s creation timestamp
     * @param idToken Identification token bound to a friend
     * @param signature 
     */
    public deleteV1ServerPostsTimestampCommentsCommenttimestampWithHttpInfo(timestamp: number, commentTimestamp: number, idToken?: string, signature?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/server/posts/${timestamp}/comments/${commentTimestamp}'
                    .replace('${' + 'timestamp' + '}', String(timestamp))
                    .replace('${' + 'commentTimestamp' + '}', String(commentTimestamp));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'timestamp' is not null or undefined
        if (timestamp === null || timestamp === undefined) {
            throw new Error('Required parameter timestamp was null or undefined when calling deleteV1ServerPostsTimestampCommentsCommenttimestamp.');
        }
        // verify required parameter 'commentTimestamp' is not null or undefined
        if (commentTimestamp === null || commentTimestamp === undefined) {
            throw new Error('Required parameter commentTimestamp was null or undefined when calling deleteV1ServerPostsTimestampCommentsCommenttimestamp.');
        }
        if (idToken !== undefined) {
            queryParameters.set('idToken', <any>idToken);
        }

        if (signature !== undefined) {
            queryParameters.set('signature', <any>signature);
        }


        // to determine the Accept header
        let produces: string[] = [
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:true
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Delete a reaction
     * Delete a reaction to a given post
     * @param timestamp The post&#39;s creation timestamp
     * @param idToken Identification token bound to a friend
     * @param signature 
     * @param body 
     */
    public deleteV1ServerPostsTimestampReactionsWithHttpInfo(timestamp: number, idToken?: string, signature?: string, body?: Reaction, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/server/posts/${timestamp}/reactions'
                    .replace('${' + 'timestamp' + '}', String(timestamp));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'timestamp' is not null or undefined
        if (timestamp === null || timestamp === undefined) {
            throw new Error('Required parameter timestamp was null or undefined when calling deleteV1ServerPostsTimestampReactions.');
        }
        if (idToken !== undefined) {
            queryParameters.set('idToken', <any>idToken);
        }

        if (signature !== undefined) {
            queryParameters.set('signature', <any>signature);
        }


        // to determine the Accept header
        let produces: string[] = [
        ];

            
        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:true
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Retrieve all friend requests
     * Retrieve all friend requests (accepted, incoming and sent). Further documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Client-to-server-API#retrieval-4).
     */
    public getV1ClientFriendsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/client/friends';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Accept header
        let produces: string[] = [
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:true
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Retrieve data on the current user
     * Retrieve data on the current user. Full documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Client-to-server-API#retrieval).
     */
    public getV1ClientMeWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/client/me';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Accept header
        let produces: string[] = [
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:true
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Retrieve posts
     * Retrieve all posts or using filters. Further documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Client-to-server-API#retrieval-1).
     * @param from Most recent timestamp
     * @param nb Number of posts to retrieve
     */
    public getV1ClientPostsWithHttpInfo(from?: number, nb?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/client/posts';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        if (from !== undefined) {
            queryParameters.set('from', <any>from);
        }

        if (nb !== undefined) {
            queryParameters.set('nb', <any>nb);
        }


        // to determine the Accept header
        let produces: string[] = [
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:true
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Retrieve a single post
     * Retrieve a single post using its creation timestamp. Further documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Client-to-server-API#retrieve-one-post).
     * @param user The post&#39;s author, identified as &#x60;username@instance-domain.tld&#x60;
     * @param timestamp The post&#39;s creation timestamp
     */
    public getV1ClientPostsUserTimestampWithHttpInfo(user: string, timestamp: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/client/posts/${user}/${timestamp}'
                    .replace('${' + 'user' + '}', String(user))
                    .replace('${' + 'timestamp' + '}', String(timestamp));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'user' is not null or undefined
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling getV1ClientPostsUserTimestamp.');
        }
        // verify required parameter 'timestamp' is not null or undefined
        if (timestamp === null || timestamp === undefined) {
            throw new Error('Required parameter timestamp was null or undefined when calling getV1ClientPostsUserTimestamp.');
        }

        // to determine the Accept header
        let produces: string[] = [
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:true
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Retrieve comments for a post
     * Retrieve comments for a given post based on its user and timestamp. Further documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Client-to-server-API#retrieval-2).
     * @param user The post&#39;s author, identified as &#x60;username@instance-domain.tld&#x60;
     * @param timestamp The post&#39;s creation timestamp
     * @param from Most recent timestamp
     * @param nb Number of comments to retrieve
     */
    public getV1ClientPostsUserTimestampCommentsWithHttpInfo(user: string, timestamp: number, from?: number, nb?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/client/posts/${user}/${timestamp}/comments'
                    .replace('${' + 'user' + '}', String(user))
                    .replace('${' + 'timestamp' + '}', String(timestamp));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'user' is not null or undefined
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling getV1ClientPostsUserTimestampComments.');
        }
        // verify required parameter 'timestamp' is not null or undefined
        if (timestamp === null || timestamp === undefined) {
            throw new Error('Required parameter timestamp was null or undefined when calling getV1ClientPostsUserTimestampComments.');
        }
        if (from !== undefined) {
            queryParameters.set('from', <any>from);
        }

        if (nb !== undefined) {
            queryParameters.set('nb', <any>nb);
        }


        // to determine the Accept header
        let produces: string[] = [
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:true
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Retrieve posts
     * Retrieve all posts or using filters. Further documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Server-to-server-API#retrieve-several-posts).
     * @param from Most recent timestamp
     * @param nb Number of posts to retrieve
     * @param idToken Identification token bound to a friend. If not provided, only public posts will be sent
     * @param signature 
     */
    public getV1ServerPostsWithHttpInfo(from?: number, nb?: number, idToken?: string, signature?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/server/posts';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        if (from !== undefined) {
            queryParameters.set('from', <any>from);
        }

        if (nb !== undefined) {
            queryParameters.set('nb', <any>nb);
        }

        if (idToken !== undefined) {
            queryParameters.set('idToken', <any>idToken);
        }

        if (signature !== undefined) {
            queryParameters.set('signature', <any>signature);
        }


        // to determine the Accept header
        let produces: string[] = [
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:true
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Retrieve a single post
     * Retrieve a single post using its creation timestamp. Further documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Server-to-server-API#retrieve-one-post).
     * @param timestamp The post&#39;s creation timestamp
     * @param idToken Identification token bound to a friend
     * @param signature 
     */
    public getV1ServerPostsTimestampWithHttpInfo(timestamp: number, idToken?: string, signature?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/server/posts/${timestamp}'
                    .replace('${' + 'timestamp' + '}', String(timestamp));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'timestamp' is not null or undefined
        if (timestamp === null || timestamp === undefined) {
            throw new Error('Required parameter timestamp was null or undefined when calling getV1ServerPostsTimestamp.');
        }
        if (idToken !== undefined) {
            queryParameters.set('idToken', <any>idToken);
        }

        if (signature !== undefined) {
            queryParameters.set('signature', <any>signature);
        }


        // to determine the Accept header
        let produces: string[] = [
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:true
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Retrieve comments from a post
     * Retrieve comments from a post using its creation timestamp. Further documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Server-to-server-API#retrieving-comments-on-a-post).
     * @param timestamp The post&#39;s creation timestamp
     * @param from Most recent timestamp
     * @param nb Number of comments to retrieve
     * @param idToken Identification token bound to a friend
     * @param signature 
     */
    public getV1ServerPostsTimestampCommentsWithHttpInfo(timestamp: number, from?: number, nb?: number, idToken?: string, signature?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/server/posts/${timestamp}/comments'
                    .replace('${' + 'timestamp' + '}', String(timestamp));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'timestamp' is not null or undefined
        if (timestamp === null || timestamp === undefined) {
            throw new Error('Required parameter timestamp was null or undefined when calling getV1ServerPostsTimestampComments.');
        }
        if (from !== undefined) {
            queryParameters.set('from', <any>from);
        }

        if (nb !== undefined) {
            queryParameters.set('nb', <any>nb);
        }

        if (idToken !== undefined) {
            queryParameters.set('idToken', <any>idToken);
        }

        if (signature !== undefined) {
            queryParameters.set('signature', <any>signature);
        }


        // to determine the Accept header
        let produces: string[] = [
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:true
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Create a friend/following request
     * Create a friend request or follow a given user
     * @param body 
     */
    public postV1ClientFriendsWithHttpInfo(body?: FriendInput, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/client/friends';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Accept header
        let produces: string[] = [
        ];

            
        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:true
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Create a post
     * Creates a post, provided the necessary information is present. Full documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Client-to-server-API#creation).
     * @param body 
     */
    public postV1ClientPostsWithHttpInfo(body?: PostInput, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/client/posts';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Accept header
        let produces: string[] = [
        ];

            
        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:true
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Create a new comment to a post
     * Create a comment on a givent post. Further documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Client-to-server-API#creation-1).
     * @param user The post&#39;s author, identified as &#x60;username@instance-domain.tld&#x60;
     * @param timestamp The post&#39;s creation timestamp
     * @param body 
     */
    public postV1ClientPostsUserTimestampCommentsWithHttpInfo(user: string, timestamp: number, body?: CommentInput, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/client/posts/${user}/${timestamp}/comments'
                    .replace('${' + 'user' + '}', String(user))
                    .replace('${' + 'timestamp' + '}', String(timestamp));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'user' is not null or undefined
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling postV1ClientPostsUserTimestampComments.');
        }
        // verify required parameter 'timestamp' is not null or undefined
        if (timestamp === null || timestamp === undefined) {
            throw new Error('Required parameter timestamp was null or undefined when calling postV1ClientPostsUserTimestampComments.');
        }

        // to determine the Accept header
        let produces: string[] = [
        ];

            
        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:true
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Add a reaction
     * Add a reaction to a given post
     * @param user Post author
     * @param timestamp The post&#39;s creation timestamp
     */
    public postV1ClientPostsUserTimestampReactionsWithHttpInfo(user: string, timestamp: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/client/posts/${user}/${timestamp}/reactions'
                    .replace('${' + 'user' + '}', String(user))
                    .replace('${' + 'timestamp' + '}', String(timestamp));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'user' is not null or undefined
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling postV1ClientPostsUserTimestampReactions.');
        }
        // verify required parameter 'timestamp' is not null or undefined
        if (timestamp === null || timestamp === undefined) {
            throw new Error('Required parameter timestamp was null or undefined when calling postV1ClientPostsUserTimestampReactions.');
        }

        // to determine the Accept header
        let produces: string[] = [
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters,
            withCredentials:true
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Save friend request
     * Receive friend request and save it in the database as incoming
     * @param body 
     */
    public postV1ServerFriendsWithHttpInfo(body?: FriendRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/server/friends';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Accept header
        let produces: string[] = [
        ];

            
        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:true
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Add a comment to a post
     * Add a comment to a post using the post&#39;s creation timestamp. Further documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Server-to-server-API#post-a-comment).
     * @param timestamp The post&#39;s creation timestamp
     * @param idToken Identification token bound to a friend
     * @param signature 
     * @param body 
     */
    public postV1ServerPostsTimestampCommentsWithHttpInfo(timestamp: number, idToken?: string, signature?: string, body?: CommentInput, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/server/posts/${timestamp}/comments'
                    .replace('${' + 'timestamp' + '}', String(timestamp));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'timestamp' is not null or undefined
        if (timestamp === null || timestamp === undefined) {
            throw new Error('Required parameter timestamp was null or undefined when calling postV1ServerPostsTimestampComments.');
        }
        if (idToken !== undefined) {
            queryParameters.set('idToken', <any>idToken);
        }

        if (signature !== undefined) {
            queryParameters.set('signature', <any>signature);
        }


        // to determine the Accept header
        let produces: string[] = [
        ];

            
        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:true
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Add a reaction
     * Add a reaction to a given post
     * @param timestamp The post&#39;s creation timestamp
     * @param idToken Identification token bound to a friend
     * @param signature 
     * @param body 
     */
    public postV1ServerPostsTimestampReactionsWithHttpInfo(timestamp: number, idToken?: string, signature?: string, body?: Reaction, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/server/posts/${timestamp}/reactions'
                    .replace('${' + 'timestamp' + '}', String(timestamp));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'timestamp' is not null or undefined
        if (timestamp === null || timestamp === undefined) {
            throw new Error('Required parameter timestamp was null or undefined when calling postV1ServerPostsTimestampReactions.');
        }
        if (idToken !== undefined) {
            queryParameters.set('idToken', <any>idToken);
        }

        if (signature !== undefined) {
            queryParameters.set('signature', <any>signature);
        }


        // to determine the Accept header
        let produces: string[] = [
        ];

            
        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:true
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Update data on the current user
     * Update data on the current user. Full documentation is available [here](https://github.com/JosephCaillet/vinimay/wiki/Client-to-server-API#update).
     * @param body 
     */
    public putV1ClientMeWithHttpInfo(body?: UserDataInput, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/client/me';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Accept header
        let produces: string[] = [
        ];

            
        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:true
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
